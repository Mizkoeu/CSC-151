#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 63 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 2066 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 12 #"gigls/unsafe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 16 #"rackunit/text-ui"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;; File:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;   669581.rkt"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Authors:"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;;   The student currently referred to as 669581"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;   Charlie Curtsinger"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;   Samuel A. Rebelsky"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Contents:"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;   Code and solutions for Exam 3 2016S"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Citations:"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;   See below (citation mentioned at the beginning of each problem"
 #")."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; +---------+------------------------------------------------------"
 #"--"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";; | Grading |"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; +---------+"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; This section is for the grader's use."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Problem 1:   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Problem 2:   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Problem 3:   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Problem 4:   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Problem 5:   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Problem 6:   "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;           ----"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;     Total:   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;    Scaled:   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;    Errors:   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;     Times:   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;          :   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;          :   "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;          :   "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;           ----"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;     Total:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; +-----------+----------------------------------------------------"
 #"--"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; | Problem 1 |"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; +-----------+"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Time Spent: 20 min"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; Citations: "
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; 1. CSC 151 Reading: Local Procedure Bindings and Recursion"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";    http://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2016S/readi"
 #"ngs/letrec-reading.html"
) 0 0 24 29 1 #"\n"
0 0 17 3 39 #";    Reference for how named let works."
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";    By Curtsinger C., Davis J., Rebelsky S.A., and Weinman J. Last "
 #"viewed: 04/11/16"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Solution:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; b) Explain why there are 2 calls to reverse in the base case:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";    That's because the procedure should be implemented in such as w"
 #"ay that"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";   the orders of the elements in each of the sub-lists a and b are "
 #"identical "
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   to their respective orders in the original list. Without reverse"
 #", the "
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   \"cons\" procedure prepends a certain element to the existing li"
 #"st, which"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   effectively reverses the order of the elements (and we don't wan"
 #"t that "
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   to happen). So calling the 2 reverse procedures help us rearrang"
 #"e the "
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #";   sub-lists into their original orders."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; a) and c)"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; Renaming and 6P-style documentation are both presented below:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   number-filter"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; PARAMETERS:"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;   lst, a heterogeneous list"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;   Filter out all number elements in a list and place them in fro"
 #"nt"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;   of the other non-number elements in the list."
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;;   new-list, a homogeneous list (consisting of only lists)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;;   length of new-list = 2 (there are 2 sub-lists in new-list);"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;;   length of lst = sum of the lengths of both sub-lists in new-li"
 #"st."
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;   The first sub-list of new-list consists of only numbers "
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;         (numbers can"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 3 #"any"
0 0 17 3 1 #" "
0 0 17 3 5 #"type:"
0 0 17 3 1 #" "
0 0 17 3 7 #"integer"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 7 #"decimal"
0 0 17 3 1 #" "
0 0 17 3 2 #"or"
0 0 17 3 41 #" fractional, even number symbols like '3)"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;   The second sub-list of new-list consists of elements that are "
 #"not numbers."
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;;   the order of elements in each sub-list is identical to the ord"
 #"er of "
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;;         the respective data type (num or non-num) in the origina"
 #"l lst."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"number-filter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 7 #"num-lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 11 #"non-num-lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 9 #"remaining"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 7 #"num-lst"
0 0 24 3 3 #") ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-num-lst"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 14 3 7 #"num-lst"
0 0 24 3 2 #") "
0 0 14 3 11 #"non-num-lst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"kernel"
0 0 24 3 1 #" "
0 0 14 3 7 #"num-lst"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 14 3 11 #"non-num-lst"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Examples/Tests:"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; >"
0 0 17 3 2 #" ("
0 0 17 3 13 #"number-filter"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"Hello!\""
0 0 17 3 4 #" '3 "
0 0 17 3 1 #"'"
0 0 17 3 3 #"how"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 6 #"12.345"
0 0 17 3 1 #" "
0 0 17 3 5 #"\"you\""
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"I"
0 0 17 3 1 #" "
0 0 17 3 3 #"135"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"was"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 17 #"wondering.. 3/8))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; '"
0 0 17 3 4 #"((3 "
0 0 17 3 6 #"12.345"
0 0 17 3 1 #" "
0 0 17 3 3 #"135"
0 0 17 3 1 #" "
0 6          10 17 4 #"3/8\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   ("
0 0 17 3 8 #"\"Hello!\""
0 0 17 3 1 #" "
0 0 17 3 3 #"how"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 5 #"\"you\""
0 0 17 3 1 #" "
0 0 17 3 1 #"I"
0 0 17 3 1 #" "
0 0 17 3 3 #"was"
0 0 17 3 14 #" wondering..))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; >"
0 0 17 3 2 #" ("
0 0 17 3 13 #"number-filter"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"hello\""
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 4 #"45.3"
0 0 17 3 1 #" "
0 0 17 3 4 #"\"/n\""
0 0 17 3 1 #" "
0 0 17 3 3 #"123"
0 0 17 3 11 #" \"World!\"))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; '"
0 0 17 3 2 #"(("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 4 #"45.3"
0 0 17 3 1 #" "
0 0 17 3 3 #"123"
0 0 17 3 3 #") ("
0 0 17 3 7 #"\"hello\""
0 0 17 3 1 #" "
0 0 17 3 4 #"\"/n\""
0 0 17 3 11 #" \"World!\"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; +-----------+----------------------------------------------------"
 #"--"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; | Problem 2 |"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; +-----------+"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Time Spent: 15 min"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Citations:"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; 1. CSC 151 Reading: Local Procedure Bindings and Recursion"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";    http://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2016S/readi"
 #"ngs/letrec-reading.html"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";    Reference for how to use local binding to avoid double-recursio"
 #"n."
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";    By Curtsinger C., Davis J., Rebelsky S.A., and Weinman J. Last "
 #"viewed: 04/10/16"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Supplied procedures:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   irgb-distance"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;;   color1, an integer-encoded RGB color"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;;   color2, an integer-encoded RGB color"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;;   Find the distance between color1 and color2, using some simple"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;   metric for distance."
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;;   distance, a non-negative real number"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;;   If color1=color2, then distance is 0"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;;   For any three colors, a, b, and c, if "
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;;     (irgb-distance a b) < (irgb-distance b c)"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;;   then a is likely to be perceived as being closer to b than c."
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;; Plus:"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;;   irgb-distance is commutative.  That is, for any two colors, a "
 #"and b,"
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #";;;     (irgb-distance a b) = (irgb-distance b a)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"irgb-distance"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"color1"
0 0 24 3 1 #" "
0 0 14 3 6 #"color2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"irgb-red"
0 0 24 3 1 #" "
0 0 14 3 6 #"color1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"irgb-red"
0 0 24 3 1 #" "
0 0 14 3 6 #"color2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 10 #"irgb-green"
0 0 24 3 1 #" "
0 0 14 3 6 #"color1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"irgb-green"
0 0 24 3 1 #" "
0 0 14 3 6 #"color2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 9 #"irgb-blue"
0 0 24 3 1 #" "
0 0 14 3 6 #"color1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"irgb-blue"
0 0 24 3 1 #" "
0 0 14 3 6 #"color2"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Solution:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   irgb-closest"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;;   original, an integer-encoded RGB color"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;;   colors, a non-empty list of integer-encoded RGB colors"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;;   Find the element of colors that is \"closest\" to original."
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;;   closest, an integer-encoded RGB color"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;;   closest is a member of colors."
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;;   For all colors, c, in colors"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;;     (irgb-distrance original closest) <= (irgb-distance original"
 #" c)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"irgb-closest"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"original"
0 0 24 3 1 #" "
0 0 14 3 6 #"colors"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 6 #"so-far"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"colors"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 9 #"remaining"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"colors"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 6 #"so-far"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 13 #"irgb-distance"
0 0 24 3 1 #" "
0 0 14 3 8 #"original"
0 0 24 3 1 #" "
0 0 14 3 6 #"so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"irgb-distance"
0 0 24 3 1 #" "
0 0 14 3 8 #"original"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"kernel"
0 0 24 3 1 #" "
0 0 14 3 6 #"so-far"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Examples/Tests:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 2 #"> "
0 0 17 3 1 #"("
0 0 17 3 12 #"irgb->string"
0 0 17 3 2 #" ("
0 0 17 3 12 #"irgb-closest"
0 0 17 3 2 #" ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #"128"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #"126"
0 0 17 3 3 #") ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #"253"
0 0 17 3 3 #") ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 8 #" 129))))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; \"0/0/129\""
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 2 #"> "
0 0 17 3 1 #"("
0 0 17 3 12 #"irgb->string"
0 0 17 3 2 #" ("
0 0 17 3 12 #"irgb-closest"
0 0 17 3 2 #" ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #"128"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #"127"
0 0 17 3 3 #") ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #"253"
0 0 17 3 3 #") ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 8 #" 129))))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; \"0/0/127\" "
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 5 #"turns"
0 0 17 3 1 #" "
0 0 17 3 3 #"out"
0 0 17 3 21 #" this implementation "
0 0 17 3 5 #"finds"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 5 #"color"
0 0 17 3 1 #" "
0 0 17 3 6 #"member"
0 0 17 3 61
#" that fits the criterion of being the closest to a set color)"
0 0 24 29 1 #"\n"
0 0 17 3 116
(
 #"; > (irgb->string (irgb-closest (irgb 255 255 255) (list (irgb 122 1"
 #"32 122) (irgb 255 254 253) (irgb 255 255 253))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #"; \"255/255/253\""
0 0 24 29 1 #"\n"
0 0 17 3 116
(
 #"; > (irgb->string (irgb-closest (irgb 255 255 255) (list (irgb 122 1"
 #"32 122) (irgb 255 254 253) (irgb 255 253 254))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #"; \"255/254/253\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; >"
0 0 17 3 2 #" ("
0 0 17 3 12 #"irgb->string"
0 0 17 3 2 #" ("
0 0 17 3 12 #"irgb-closest"
0 0 17 3 2 #" ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 3 #"128"
0 0 17 3 1 #" "
0 0 17 3 3 #"128"
0 0 17 3 1 #" "
0 0 17 3 3 #"128"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 3 #"122"
0 0 17 3 1 #" "
0 0 17 3 3 #"132"
0 0 17 3 1 #" "
0 0 17 3 3 #"122"
0 0 17 3 3 #") ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 3 #"127"
0 0 17 3 1 #" "
0 0 17 3 3 #"128"
0 0 17 3 1 #" "
0 0 17 3 3 #"253"
0 0 17 3 3 #") ("
0 0 17 3 4 #"irgb"
0 0 17 3 1 #" "
0 0 17 3 3 #"128"
0 0 17 3 1 #" "
0 0 17 3 3 #"126"
0 0 17 3 8 #" 129))))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; \"128/126/129\""
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; It works, based on my laborious calculations..."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; +-----------+----------------------------------------------------"
 #"--"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; | Problem 3 |"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; +-----------+"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Time Spent: 20 min"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Citations:"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; 1. CSC 151 Reading: Recursion"
0 0 17 3 7 #" Basics"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";    http://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2016S/readi"
 #"ngs/"
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";    recursion-basics-reading.html"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";    Reference for how to build a basic recursive procedures."
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";    By Curtsinger C., Davis J., Rebelsky S.A., and Weinman J. Last "
 #"viewed: 04/11/16."
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #"; 1. CSC 151 Reading: List Recursion, Revisited"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";    http://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2016S/readi"
 #"ngs/"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";    list-recursion-revisited-reading.html"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";    By Curtsinger C., Davis J., Rebelsky S.A., and Weinman J. Last "
 #"viewed: 04/11/16"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Solution:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;;   rac"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; PARAMETERS:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   lst, a list"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;;   Find and output the last element of a list."
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   last-element,any type"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;;   lst is a non-empty list (cannot be null)."
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;;   last-element = (list-ref lst (+ n 1)), where"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"length"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 6 #" lst. "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"rac"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"rac"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;;   rdc"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; PARAMETERS:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   lst, a list"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;   Output a new list of all the elements but the last "
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   element of the original list."
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;;   new-list, a list"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;   lst is a non-empty list."
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;;   The length of new-list = length of lst - 1"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;;   for n <= (length of new-list - 1):"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;        ("
0 0 17 3 8 #"list-ref"
0 0 17 3 1 #" "
0 0 17 3 8 #"new-list"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 2 #") "
0 0 17 3 1 #"="
0 0 17 3 2 #" ("
0 0 17 3 8 #"list-ref"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"rdc"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"null"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rdc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Examples/Tests:"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; > (rac (list 2 5 3 4))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 4"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; > (rac (list 2 5 3 7 6 \"car\" 34 \"die\"))"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; \"die\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; >"
0 0 17 3 2 #" ("
0 0 17 3 3 #"rac"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 4 #" 5))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 5"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; >"
0 0 17 3 2 #" ("
0 0 17 3 3 #"rdc"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 4 #" 5))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; '()"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; > (rdc (list 2 5 3 7 6 \"car\" 34 \"die\"))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; '(2 5 3 7 6 \"car\" 34)"
0 0 24 29 1 #"\n"
0 0 17 3 56
#"; > (rdc (list \"computer\" 2.3 12 6 \"science\" 3.1415926))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; '(\"computer\" 2.3 12 6 \"science\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; +-----------+----------------------------------------------------"
 #"--"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; | Problem 4 |"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; +-----------+"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Time Spent: 30 min"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Citations:"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; 1. The original versions of both index-of-substring and contains-t"
 #"ests were"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";   provided as part of the original examination code, provided by P"
 #"rofessors"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";   Curstinger and Rebelsky.  I have added additional tests to the t"
 #"est"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";   suite and I have modified and renamed index-of-substring by addi"
 #"ng 1 to the "
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";   initial "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 6 #"finish"
0 0 17 3 2 #" ("
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 3 #"let"
0 0 17 3 1 #" "
0 0 17 3 9 #"statement"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"existing"
0 0 17 3 1 #" "
0 0 17 3 14 #"implementation"
0 0 17 3 2 #")."
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; 2. CSC 151 Reading: Characters and Strings in Scheme."
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";    http://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2016S/readi"
 #"ngs/strings-reading.html"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";    Reference for commands for manipulating strings"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";    By Curtsinger C., Davis J., Rebelsky S.A., and Weinman J. Last "
 #"viewed: 04/11/16"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #"; 3. CSC 151 Laboratory: Characters and Strings in Scheme"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";    http://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2016S/labs/"
 #"strings-lab.html"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";    Referenced Exercise 3: Referecing Lengths."
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";    By Curtsinger C., Davis J., Rebelsky S.A., and Weinman J. Last "
 #"viewed: 04/11/16"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Solution:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;   index-of-substring"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   str, a string"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;;   substr, a string"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;   Find the index of an instance of substr in str."
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   pos, an integer or #f"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;   No additional."
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;   If substr is not contained in str, then pos is #f"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;;   If substr is contained within str, then pos is a non-negative"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   integer and"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;;     0 &lt;= pos &lt; (string-length str)"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;     substr appears as a substring of str, with the initial chara"
 #"cter"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";;;     of substr at position pos of str. "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"index-of-substring"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 6 #"substr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"substr-len"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"substr"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 6 #"finish"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 14 3 10 #"substr-len"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 6 #"finish"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"substr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 10 #"substr-len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 3 #"pos"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #") "
0 0 14 3 6 #"finish"
0 0 24 3 7 #")])))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; a)"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; The 2 additional tests are included in the test-suite:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"contains-tests"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"test-suite"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 26 #"\"Tests of string-contains\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"index-of-substring"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"ban\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 17 #"\"start of string\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"index-of-substring"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"pineapple\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pine\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 17 #"\"start of string\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"index-of-substring"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"nan\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"2"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 18 #"\"middle of string\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"check-false"
0 0 24 3 2 #" ("
0 0 14 3 18 #"index-of-substring"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"NAN\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 26 #"\"incorrect capitalization\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"check-false"
0 0 24 3 2 #" ("
0 0 14 3 18 #"index-of-substring"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 18 #"\"mismatched fruit\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 50 #"; Here are the 2 additional tests that would fail:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"index-of-substring"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 38 #"\"when substring is the same as string\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"index-of-substring"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Hello World\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"World\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"6"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 41 #"\"When sub-str appeears at the end of str\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; In the above 2 cases, it seems that the implementation does not wo"
 #"rk."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Examples/Tests:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 1 #">"
0 0 17 3 2 #" ("
0 0 17 3 9 #"run-tests"
0 0 17 3 16 #" contains-tests)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Tests"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 15 #"string-contains"
0 0 17 3 1 #" "
0 0 17 3 4 #"> #f"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #"Unnamed"
0 0 17 3 6 #" test "
0 0 24 29 1 #"\n"
0 0 17 3 8 #";FAILURE"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 24 #"name:       check-equal?"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 27 #"location:   Exam3.rkt:294:3"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 14 #"actual:     #f"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"expected:   0"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 50 #"message:    \"when substring is the same as string\""
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"Check failure"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";--------------------"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";--------------------"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"Tests"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 15 #"string-contains"
0 0 17 3 1 #" "
0 0 17 3 4 #"> #f"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #"Unnamed"
0 0 17 3 6 #" test "
0 0 24 29 1 #"\n"
0 0 17 3 8 #";FAILURE"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 24 #"name:       check-equal?"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 27 #"location:   Exam3.rkt:297:3"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 14 #"actual:     #f"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"expected:   6"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 53 #"message:    \"When sub-str appeears at the end of str\""
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"Check failure"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";--------------------"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 7 #"success"
0 0 17 3 1 #"("
0 0 17 3 2 #"es"
0 0 17 3 2 #") "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 7 #"failure"
0 0 17 3 1 #"("
0 0 17 3 1 #"s"
0 0 17 3 2 #") "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 5 #"error"
0 0 17 3 1 #"("
0 0 17 3 1 #"s"
0 0 17 3 2 #") "
0 0 17 3 1 #"7"
0 0 17 3 1 #" "
0 0 17 3 4 #"test"
0 0 17 3 1 #"("
0 0 17 3 6 #"s) run"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; b)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; Correct implementation as follows:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"my-index-of-substring"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 6 #"substr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"substr-len"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"substr"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 6 #"finish"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 14 3 10 #"substr-len"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 6 #"finish"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"substr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 10 #"substr-len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 3 #"pos"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #") "
0 0 14 3 6 #"finish"
0 0 24 3 7 #")])))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; Tests:"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; >"
0 0 17 3 2 #" ("
0 0 17 3 21 #"my-index-of-substring"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"banana\""
0 0 17 3 10 #" \"banana\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 0"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; It works when substr is identical to str."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; >"
0 0 17 3 2 #" ("
0 0 17 3 21 #"my-index-of-substring"
0 0 17 3 1 #" "
0 0 17 3 9 #"\"ban ana\""
0 0 17 3 7 #" \"ana\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 4"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 2 #"> "
0 0 17 3 1 #"("
0 0 17 3 21 #"my-index-of-substring"
0 0 17 3 1 #" "
0 0 17 3 9 #"\"ban/ana\""
0 0 17 3 7 #" \"ana\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 4"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; It works when substr is at the very end of the original str."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; >"
0 0 17 3 2 #" ("
0 0 17 3 21 #"my-index-of-substring"
0 0 17 3 1 #" "
0 0 17 3 12 #"\"ban dr ana\""
0 0 17 3 7 #" \"ana\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 7"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 3 #"> ("
0 0 17 3 39 #"my-index-of-substring \"b anana\" \" ana\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 1"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; >"
0 0 17 3 23 #" (my-index-of-substring"
0 0 17 3 1 #" "
0 0 17 3 10 #"\"b an ana\""
0 0 17 3 8 #" \" ana\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 4"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; It works with multiple spaces in the str too."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; +-----------+----------------------------------------------------"
 #"--"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; | Problem 5 |"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; +-----------+"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Time Spent: 50 min"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Citations:"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; 1. CSC 151 Reading: Local Procedure Bindings and Recursion"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";    http://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2016S/readi"
 #"ngs/letrec-reading.html"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";    Reference for inserting helper procedures within a larger lambd"
 #"a implementation."
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";    By Curtsinger C., Davis J., Rebelsky S.A., and Weinman J. Last "
 #"viewed: 04/10/16"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #"; 1. CSC 151 Laboratory: Numeric Recursion"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";    http://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2016S/labs/"
 #"helper-recursion-lab.html"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";    Reference for constructing helper procedures to iterate through"
 #" a number n."
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";    By Curtsinger C., Davis J., Rebelsky S.A., and Weinman J. Last "
 #"viewed: 04/10/16"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Solution:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   stencil-quarter-circle"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;   radius, a positive integer"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;   n, a non-negative integer"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;   color, an integer-encoded RGB color"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;   Create a new radius-by-radi"
 #"us image that contains a \"stencil\" of"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;   a quarter circle with the same radius, centered at the top-lef"
 #"t."
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;;   The stencil is built by randomly generating n points in the im"
 #"age, "
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;   and drawing a pixel of the given color only when the point fal"
 #"ls"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;   within the quarter circle."
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   stencil, an image"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"stencil-quarter-circle"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"radius"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"stencil"
0 0 24 3 2 #" ("
0 0 14 3 9 #"image-new"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"distance"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 6 #"))))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (["
0 0 14 3 9 #"recursive"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 7 #"stencil"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"col"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ["
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 2 #") "
0 0 14 3 6 #"radius"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 16 #"image-set-pixel!"
0 0 24 3 1 #" "
0 0 14 3 7 #"stencil"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 14 3 7 #"stencil"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 9 #"recursive"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 8 #")))]))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"recursive"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Examples/Tests:"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; > (image-show (stencil-quarter-circle 100 5000 (rgb-new 0 0 0)))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 2"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; > (image-show (stencil-quarter-circle 200 1000 (rgb-new 0 0 0)))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 3"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; > (image-show (stencil-quarter-circle 150 10000 (rgb-new 255 0 0))"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 4"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; The implementation works, at least judging from comparing the imag"
 #"e produced"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #"; with the example image in the exam."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; +-----------+----------------------------------------------------"
 #"--"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; | Problem 6 |"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; +-----------+"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Time Spent: 65 min"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Citations:"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; 1. CSC 151 Laboratory: Numeric Recursion"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";    http://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2016S/labs/"
 #"helper-recursion-lab.html"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";    Reference for constructing helper procedures to iterate through"
 #" a number n."
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";    By Curtsinger C., Davis J., Rebelsky S.A., and Weinman J. Last "
 #"viewed: 04/10/16"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; 2. Referenced the implementation from Problem 5 of Exam 3, where a"
 #" similar Monte Carlo method"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";    is utilized. Similarly, the local binding and a numeric recursi"
 #"on are used for iteration of"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";    selecting random numbers."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Solution:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   estimate-pi"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; PARAMETERS:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   n, a positive integer"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;   To estimate the value of pi by counting number of random"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;;   points that fall within a certain area."
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;   approx-pi, a number"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;   approx-pi is an inexact number (in decimal form)"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";;;   Generally, the larger n is, the more digits (in most cases) th"
 #"ere are after"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;       the decimal"
0 0 17 3 1 #" "
0 0 17 3 5 #"point"
0 0 17 3 1 #" "
0 0 17 3 13 #"of approx-pi."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"estimate-pi"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"distance"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 6 #"))))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (["
0 0 14 3 5 #"count"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ["
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"count"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 5 #"count"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 8 #"))))))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; I used 4.0 instead of 4 because I would like to display the final "
 #"result in "
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inexact"
0 0 17 3 57 #" decimal form, not fractions (easier to compare results)."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Examples/Tests:"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; > (estimate-pi 10)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.2"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; > (estimate-pi 100)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.4"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; > (estimate-pi 1000)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; 3.248"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; > (estimate-pi 10000)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; 3.1684"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; > (estimate-pi 100000)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; 3.13644"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; > (estimate-pi 1000000)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; 3.14016"
0           0
